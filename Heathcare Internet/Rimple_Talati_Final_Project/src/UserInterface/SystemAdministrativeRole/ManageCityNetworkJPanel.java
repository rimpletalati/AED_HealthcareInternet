/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdministrativeRole;

import Business.Ecosystem;
import Business.Network.NetworkCities;
import Business.Network.NetworkCountries;
import Business.Network.NetworkStates;
import java.awt.CardLayout;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rimple
 */
public class ManageCityNetworkJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCityNetworkJPanel
     */
    private JPanel userProcessContainer;
    private Ecosystem ecosystem;

    public ManageCityNetworkJPanel(JPanel userProcessContainer, Ecosystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        populateCountryComboBox();
        populateCountryComboBoxForState();
    }

    public void populateCountryComboBox() {
        countryJComboBox1.removeAllItems();

        for (NetworkCountries nc : ecosystem.getNetworkListsCountries()) {
            if (nc != null) {
                countryJComboBox1.addItem(nc);
            }
        }
    }

    public void populateStateComboBox(NetworkCountries networkCountries) {
        stateNameJComboBox1.removeAllItems();
        for (NetworkStates ns : networkCountries.getNetworkListStates()) {
            stateNameJComboBox1.addItem(ns);
        }
    }

    private void populateTable(NetworkStates networkState) {
        DefaultTableModel dtm = (DefaultTableModel) manageCityJTable.getModel();
        dtm.setRowCount(0);
        for (NetworkCities networkCities : networkState.getNetworkListCities()) {
            Object[] row = new Object[1];
            row[0] = networkCities;
            dtm.addRow(row);
        }
    }

    public void populateCountryComboBoxForState() {
        countryJComboBox2.removeAllItems();

        for (NetworkCountries nc : ecosystem.getNetworkListsCountries()) {
            if (nc != null) {
                countryJComboBox2.addItem(nc);
            }
        }
    }

    public void populateStateForCity(NetworkCountries networkCountries) {
        stateNamejComboBox2.removeAllItems();
        for (NetworkStates ns : networkCountries.getNetworkListStates()) {
            stateNamejComboBox2.addItem(ns);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingJLabel = new javax.swing.JLabel();
        countryJLabel1 = new javax.swing.JLabel();
        countryJComboBox1 = new javax.swing.JComboBox();
        stateNameJLabel = new javax.swing.JLabel();
        stateNameJComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        manageCityJTable = new javax.swing.JTable();
        countryComboJLabel = new javax.swing.JLabel();
        countryJComboBox2 = new javax.swing.JComboBox();
        stateComboJLabel = new javax.swing.JLabel();
        stateNamejComboBox2 = new javax.swing.JComboBox();
        cityNameJLabel = new javax.swing.JLabel();
        cityJTextField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();

        headingJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        headingJLabel.setText("Manage City");

        countryJLabel1.setText("Country:");

        countryJComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        countryJComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryJComboBox1ActionPerformed(evt);
            }
        });

        stateNameJLabel.setText("State:");

        stateNameJComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        stateNameJComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateNameJComboBox1ActionPerformed(evt);
            }
        });

        manageCityJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "City Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manageCityJTable);

        countryComboJLabel.setText("Country:");

        countryJComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        countryJComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryJComboBox2ActionPerformed(evt);
            }
        });

        stateComboJLabel.setText("State:");

        stateNamejComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cityNameJLabel.setText("City:");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(backJButton)
                        .addGap(63, 63, 63)
                        .addComponent(submitJButton)
                        .addGap(76, 76, 76)
                        .addComponent(deleteJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(headingJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(countryJLabel1)
                            .addComponent(stateNameJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(countryJComboBox1, 0, 91, Short.MAX_VALUE)
                            .addComponent(stateNameJComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(countryComboJLabel)
                            .addComponent(stateComboJLabel)
                            .addComponent(cityNameJLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(countryJComboBox2, 0, 91, Short.MAX_VALUE)
                            .addComponent(cityJTextField)
                            .addComponent(stateNamejComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(67, 67, 67))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryJComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryJLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateNameJComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateNameJLabel))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryComboJLabel)
                    .addComponent(countryJComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateComboJLabel)
                    .addComponent(stateNamejComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityNameJLabel)
                    .addComponent(cityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(deleteJButton)
                    .addComponent(submitJButton))
                .addGap(48, 48, 48))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void countryJComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryJComboBox1ActionPerformed

        NetworkCountries nc = (NetworkCountries) countryJComboBox1.getSelectedItem();
        if (nc != null) {
            populateStateComboBox(nc);
        }
    }//GEN-LAST:event_countryJComboBox1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void stateNameJComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateNameJComboBox1ActionPerformed

        NetworkStates ns = (NetworkStates) stateNameJComboBox1.getSelectedItem();
        if (ns != null) {
            populateTable(ns);
        }
    }//GEN-LAST:event_stateNameJComboBox1ActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        String name = cityJTextField.getText().trim();
        if ("".equals(name)) {
            JOptionPane.showMessageDialog(null, "Please do not keep city name empty.");
            return;
        }
        NetworkStates ns = (NetworkStates) stateNamejComboBox2.getSelectedItem();
        if (ns == null) {
            JOptionPane.showMessageDialog(null, "Please select a state.");
            return;
        }
        
        Pattern pattern;
        pattern = Pattern.compile("[a-zA-Z ]+");
        Matcher cityname = pattern.matcher(name);

        if (cityname.matches()) {
        boolean IsCityUnique = ns.checkifCityUnique(name);
        if (IsCityUnique) {
            NetworkCities nc = ns.createAndAddNetworkCity();
            nc.setName(name);
        } else {
            JOptionPane.showMessageDialog(null, "This city name already exists.");
        }
        cityJTextField.setText("");
        }
        else{
            JOptionPane.showMessageDialog(null, "Only alphabets are allowed");
            
        }

    }//GEN-LAST:event_submitJButtonActionPerformed

    private void countryJComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryJComboBox2ActionPerformed
        NetworkCountries nc = (NetworkCountries) countryJComboBox2.getSelectedItem();
        if (nc != null) {
            populateStateForCity(nc);
        }
    }//GEN-LAST:event_countryJComboBox2ActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed

        int selectedRow = manageCityJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        int selectedValue = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?", "Warning", JOptionPane.YES_NO_OPTION);

        if (selectedValue == JOptionPane.YES_OPTION) {
            NetworkStates ns = (NetworkStates) stateNameJComboBox1.getSelectedItem();
            NetworkCities nc = (NetworkCities) manageCityJTable.getValueAt(selectedRow, 0);
            ns.deleteNetworkState(nc);

        }
        return;

    }//GEN-LAST:event_deleteJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField cityJTextField;
    private javax.swing.JLabel cityNameJLabel;
    private javax.swing.JLabel countryComboJLabel;
    private javax.swing.JComboBox countryJComboBox1;
    private javax.swing.JComboBox countryJComboBox2;
    private javax.swing.JLabel countryJLabel1;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JLabel headingJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageCityJTable;
    private javax.swing.JLabel stateComboJLabel;
    private javax.swing.JComboBox stateNameJComboBox1;
    private javax.swing.JLabel stateNameJLabel;
    private javax.swing.JComboBox stateNamejComboBox2;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
