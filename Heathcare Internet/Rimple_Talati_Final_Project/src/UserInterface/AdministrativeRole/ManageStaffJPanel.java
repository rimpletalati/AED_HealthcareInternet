/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.DrugOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Person.Doctor;
import Business.Person.LabAssistant;
import Business.Person.Nurse;
import Business.Person.Person;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rimple
 */
public class ManageStaffJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageStaffJPanel
     */
    private JPanel userProcessContainer;
    private Ecosystem ecosystem;
    private Enterprise enterprise;

    public ManageStaffJPanel(JPanel userProcessContainer, Ecosystem ecosystem, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.enterprise = enterprise;
        populateTable();
        addStaffJButton.setVisible(false);
        addDoctorsJButton.setVisible(false);
        deleteJButton.setVisible(false);
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof NurseOrganization) {
                addStaffJButton.setVisible(true);
                deleteJButton.setVisible(true);
            }
            if (organization instanceof LabOrganization) {
                addStaffJButton.setVisible(true);
                deleteJButton.setVisible(true);
            }
            if (organization instanceof DoctorOrganization) {
                addDoctorsJButton.setVisible(true);
                deleteJButton.setVisible(true);
            }
            if (organization instanceof DrugOrganization) {
                addStaffJButton.setVisible(true);
            }
        }
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) manageTableJTable.getModel();
        model.setRowCount(0);

        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (Person p : o.getPersonDirectory().getPersonList()) {
                Object[] row = new Object[3];

                row[0] = o.getName();
                row[1] = p.getFirstName() + " " + p.getLastName();
                row[2] = p;

                model.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        manageTableJTable = new javax.swing.JTable();
        addDoctorsJButton = new javax.swing.JButton();
        addStaffJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();

        headingJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        headingJLabel.setText("Manage Staff");

        manageTableJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Staff Category", "Name", "SSN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manageTableJTable);

        addDoctorsJButton.setText("Add doctors");
        addDoctorsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorsJButtonActionPerformed(evt);
            }
        });

        addStaffJButton.setText("Add Staff");
        addStaffJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStaffJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton)
                        .addGap(40, 40, 40)
                        .addComponent(addDoctorsJButton)
                        .addGap(45, 45, 45)
                        .addComponent(addStaffJButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(refreshJButton)
                        .addComponent(deleteJButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(headingJLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(headingJLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDoctorsJButton)
                    .addComponent(addStaffJButton)
                    .addComponent(backJButton)
                    .addComponent(deleteJButton))
                .addGap(35, 35, 35)
                .addComponent(refreshJButton)
                .addContainerGap(145, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addDoctorsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorsJButtonActionPerformed
        AddDoctorsJPanel addDoctorsJPanel = new AddDoctorsJPanel(userProcessContainer, enterprise, ecosystem);
        userProcessContainer.add("AddDoctorsJPanel", addDoctorsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_addDoctorsJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        int selectedRow = manageTableJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        int selectedValue = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?", "Warning", JOptionPane.YES_NO_OPTION);

        if (selectedValue == JOptionPane.YES_OPTION) {
            Person p = (Person) manageTableJTable.getValueAt(selectedRow, 2);
            if (p instanceof Doctor) {
                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (o instanceof DoctorOrganization) {
                        DoctorOrganization docorg = (DoctorOrganization) o;
                        docorg.getPersonDirectory().deletePerson(p);

                    }

                }
                Doctor d = (Doctor) p;
                d.getEnterpriseList().remove(enterprise);
            }
            if (p instanceof LabAssistant) {
                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (o instanceof LabOrganization) {
                        o.getPersonDirectory().deletePerson(p);
                    }

                }
            }
            if (p instanceof Nurse) {
                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (o instanceof NurseOrganization) {
                        o.getPersonDirectory().deletePerson(p);
                        
                    }

                }
            }

        }

    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void addStaffJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStaffJButtonActionPerformed

        AddStaffJPanel addStaffJPanel = new AddStaffJPanel(userProcessContainer, enterprise);
        userProcessContainer.add("addStaffJPanel", addStaffJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_addStaffJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDoctorsJButton;
    private javax.swing.JButton addStaffJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JLabel headingJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable manageTableJTable;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration//GEN-END:variables
}
