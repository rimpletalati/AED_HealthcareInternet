/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DrugOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Person.LabAssistant;
import Business.Person.Nurse;
import Business.Person.Person;
import Business.Role.LabRole;
import Business.Role.NurseRole;
import Business.Role.PCEmployeeRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Rimple
 */
public class AddStaffJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddStaffJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Organization organization;

    public AddStaffJPanel(JPanel userProcessContainer, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        populateStaff();
        dobJDateChooser.getDateEditor().setEnabled(false);

    }

    public void populateStaff() {
        organizationTypeJComboBox.removeAllItems();
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (o instanceof NurseOrganization) {

                organizationTypeJComboBox.addItem("Nurse");
            }
            if (o instanceof LabOrganization) {
                organizationTypeJComboBox.addItem("Lab Assistant");
            }
            if (o instanceof DrugOrganization) {
                organizationTypeJComboBox.addItem("Employees");
            }
        }
    }
    
    private boolean check(String id, Organization org) {
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (o == org) {
                for (Person p : o.getPersonDirectory().getPersonList()) {
                    if (p.getSsn().equals(id)) {
                        JOptionPane.showMessageDialog(null, "Person with same SSN already exists.");
                        return false;
                    }
                }
            }
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderJButtonGroup = new javax.swing.ButtonGroup();
        maritalStatusJButtonGroup = new javax.swing.ButtonGroup();
        headingJLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        organizationTypeJComboBox = new javax.swing.JComboBox();
        ssnJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dateOfBirthJLabel = new javax.swing.JLabel();
        firstNameJTextField = new javax.swing.JTextField();
        lastNameJTextField = new javax.swing.JTextField();
        genderJLabel = new javax.swing.JLabel();
        maleJRadioButton = new javax.swing.JRadioButton();
        singleJRadioButton = new javax.swing.JRadioButton();
        femaleJRadioButton = new javax.swing.JRadioButton();
        marriedJRadioButton = new javax.swing.JRadioButton();
        dobJDateChooser = new com.toedter.calendar.JDateChooser();
        firstNameJLabel = new javax.swing.JLabel();
        lastNameJLabel = new javax.swing.JLabel();
        maritalStatusJLabel = new javax.swing.JLabel();
        countryJLabel = new javax.swing.JLabel();
        cityJLabel = new javax.swing.JLabel();
        countryJTextField = new javax.swing.JTextField();
        zipCodeJLabel = new javax.swing.JLabel();
        cityJTextField = new javax.swing.JTextField();
        zipCodeJTextField = new javax.swing.JTextField();
        homePhoneJLabel = new javax.swing.JLabel();
        homePhoneJTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        homeAddressJTextArea = new javax.swing.JTextArea();
        mobilePhoneJLabel = new javax.swing.JLabel();
        mobilePhoneJTextField = new javax.swing.JTextField();
        homeAddressJLabel = new javax.swing.JLabel();
        ssnJLabel = new javax.swing.JLabel();
        degreeTypeJLabel = new javax.swing.JLabel();
        trainingSchoolJTextField = new javax.swing.JTextField();
        trainingJLabel = new javax.swing.JLabel();
        licenseNoJLabel = new javax.swing.JLabel();
        licenseNoJTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        usernameJLabel = new javax.swing.JLabel();
        passwordJLabel = new javax.swing.JLabel();
        passwordJTextField = new javax.swing.JTextField();
        userNameJTextField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        degreeTypeJComboBox = new javax.swing.JComboBox();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        headingJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        headingJLabel.setText("Add Staff");
        add(headingJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(339, 13, -1, -1));

        jLabel1.setText("Staff:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 56, -1, -1));

        organizationTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nurse", "Lab Assistant" }));
        organizationTypeJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationTypeJComboBoxActionPerformed(evt);
            }
        });
        add(organizationTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(391, 53, -1, -1));
        add(ssnJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 191, 88, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Personal Details:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 82, -1, -1));

        dateOfBirthJLabel.setText("Date Of Birth:");
        add(dateOfBirthJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 157, -1, -1));
        add(firstNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 108, 122, -1));
        add(lastNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(498, 105, 91, -1));

        genderJLabel.setText("Gender:");
        add(genderJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 149, -1, -1));

        genderJButtonGroup.add(maleJRadioButton);
        maleJRadioButton.setSelected(true);
        maleJRadioButton.setText("Male");
        add(maleJRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(498, 145, -1, -1));

        maritalStatusJButtonGroup.add(singleJRadioButton);
        singleJRadioButton.setSelected(true);
        singleJRadioButton.setText("Single");
        add(singleJRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(498, 188, -1, -1));

        genderJButtonGroup.add(femaleJRadioButton);
        femaleJRadioButton.setText("Female");
        add(femaleJRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 145, -1, -1));

        maritalStatusJButtonGroup.add(marriedJRadioButton);
        marriedJRadioButton.setText("Married");
        add(marriedJRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 188, -1, -1));
        add(dobJDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 148, 132, -1));

        firstNameJLabel.setText("First Name:");
        add(firstNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 111, -1, -1));

        lastNameJLabel.setText("Last Name:");
        add(lastNameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 108, -1, -1));

        maritalStatusJLabel.setText("Marital Status:");
        add(maritalStatusJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 192, 95, -1));

        countryJLabel.setText("Country:");
        add(countryJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(682, 238, -1, -1));

        cityJLabel.setText("City:");
        add(cityJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(398, 238, -1, -1));
        add(countryJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(749, 235, 106, -1));

        zipCodeJLabel.setText("Postal/Zip code:");
        add(zipCodeJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 278, -1, -1));
        add(cityJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(481, 235, 94, -1));
        add(zipCodeJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 275, 94, -1));

        homePhoneJLabel.setText("Home Phone:");
        add(homePhoneJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 318, -1, -1));
        add(homePhoneJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 315, 123, -1));

        homeAddressJTextArea.setColumns(20);
        homeAddressJTextArea.setRows(5);
        jScrollPane2.setViewportView(homeAddressJTextArea);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 226, 208, 71));

        mobilePhoneJLabel.setText("Mobile Phone:");
        add(mobilePhoneJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 358, -1, -1));
        add(mobilePhoneJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 355, 123, -1));

        homeAddressJLabel.setText("Home Address:");
        add(homeAddressJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 238, -1, -1));

        ssnJLabel.setText("SSN:");
        add(ssnJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 194, -1, -1));

        degreeTypeJLabel.setText("Degree Type:");
        add(degreeTypeJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 408, -1, -1));
        add(trainingSchoolJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(788, 405, 91, -1));

        trainingJLabel.setText("Training School:");
        add(trainingJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(682, 408, -1, -1));

        licenseNoJLabel.setText("Licence No.:");
        add(licenseNoJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 408, -1, -1));
        add(licenseNoJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 405, 123, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setText("User Account Details:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 472, -1, -1));

        usernameJLabel.setText("Username:");
        add(usernameJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 509, -1, -1));

        passwordJLabel.setText("Password:");
        add(passwordJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 549, -1, -1));
        add(passwordJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 546, 120, -1));
        add(userNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 506, 120, -1));

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 616, -1, -1));

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(171, 616, -1, -1));

        degreeTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Non-Degree", "Degree", "Advanced Degree" }));
        add(degreeTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 405, 129, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        // TODO add your handling code here:
        try {
            String firstName = firstNameJTextField.getText().trim();
            String lastName = lastNameJTextField.getText().trim();
            String homeAddress = homeAddressJTextArea.getText();
            String city = cityJTextField.getText().trim();
            String country = countryJTextField.getText().trim();
            String zipCode = zipCodeJTextField.getText().trim();
            String homePhone = homePhoneJTextField.getText().trim();
            String mobilePhone = mobilePhoneJTextField.getText().trim();
            String ssn = ssnJTextField.getText().trim();
            String username = userNameJTextField.getText().trim();
            String password = passwordJTextField.getText().trim();
            String licenseNo = licenseNoJTextField.getText().trim();
            String trainingSchool = trainingSchoolJTextField.getText().trim();

            String DateFormat = "EEE, MMM d, yyyy";
            SimpleDateFormat sdf = new SimpleDateFormat(DateFormat);
            Date d = dobJDateChooser.getDate();
            if (("".equals(firstName)) || ("".equals(lastName)) || ("".equals(ssn))
                    || ("".equals(homeAddress)) || ("".equals(city)) || ("".equals(country))
                    || ("".equals(zipCode)) || ("".equals(homePhone)) || ("".equals(mobilePhone))
                    || ("".equals(username)) || ("".equals(password))
                    || ((JTextField) dobJDateChooser.getDateEditor().getUiComponent()).getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please do not keep any values empty.");
                return;
            }
            String dateOfBirth = sdf.format(d);

            boolean IsUserNameUnique = Ecosystem.checkIfUsernameIsUnique(username);
            if (IsUserNameUnique) {
                String staffType = String.valueOf(organizationTypeJComboBox.getSelectedItem());
                if ("Nurse".equals(staffType)) {
                    if (("".equals(trainingSchool)) || ("".equals(licenseNo))) {
                        JOptionPane.showMessageDialog(null, "Please do not keep any values empty.");
                        return;
                    }
                    Nurse nurse = new Nurse();

                    Pattern patternString = Pattern.compile("[a-zA-Z ]+");
                    Matcher fname = patternString.matcher(firstName);
                    Matcher lname = patternString.matcher(lastName);
                    Matcher cityName = patternString.matcher(city);
                    Matcher countryName = patternString.matcher(country);
                    if (fname.matches() && lname.matches() && cityName.matches() && countryName.matches()) {
                        nurse.setFirstName(firstName);
                        nurse.setLastName(lastName);
                        nurse.setCity(city);
                        nurse.setCountry(country);
                    } else {
                        JOptionPane.showMessageDialog(null, "Only alphabets are allowed for name, city, country.");
                        return;
                    }
                    nurse.setDateOfBirth(dateOfBirth);
                    if (maleJRadioButton.isSelected()) {
                        nurse.setGender("Male");
                    } else {
                        nurse.setGender("Female");
                    }
                    if (singleJRadioButton.isSelected()) {
                        nurse.setMaritalStatus("Single");
                    } else {
                        nurse.setMaritalStatus("Married");
                    }
                    nurse.setSsn(ssn);
                    nurse.setHomeAddress(homeAddress);

                    nurse.setZipCode(Integer.parseInt(zipCode));

                    //regex
                    Pattern pattern = Pattern.compile("\\d{10}");
                    Matcher homePho = pattern.matcher(homePhoneJTextField.getText());
                    Matcher mobilePho = pattern.matcher(mobilePhoneJTextField.getText());
                    if ((homePho.matches()) && (mobilePho.matches())) {
                        nurse.setHomePhone(Long.parseLong(homePhone));
                        nurse.setMobilePhone(Long.parseLong(mobilePhone));
                    } else {
                        JOptionPane.showMessageDialog(null, "Phone number not valid. Only 10 numbers are allowed");
                        return;
                    }

                    nurse.setLicenseNo(licenseNo);
                    if (degreeTypeJComboBox.getSelectedIndex() == 0) {
                        nurse.setDegreeType("Non-degree");
                    }
                    if (degreeTypeJComboBox.getSelectedIndex() == 1) {
                        nurse.setDegreeType("degree");
                    }
                    if (degreeTypeJComboBox.getSelectedIndex() == 2) {
                        nurse.setDegreeType("Advanced degree");
                    }
                    nurse.setTrainingSchool(trainingSchool);
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof NurseOrganization) {

                            organization = org;
                        }
                    }
                    boolean flag = check(ssn,organization);
                    if(!flag){
                        return;
                    }
                    organization.getPersonDirectory().addPerson(nurse);
                    UserAccount userAccount = organization.getUserAccountDirectory().createUserAccount(username, password, nurse, new NurseRole());
                }

                if ("Lab Assistant".equals(staffType)) {
                    if (("".equals(licenseNo))) {
                        JOptionPane.showMessageDialog(null, "Please do not keep any values empty.");
                        return;
                    }
                    LabAssistant la = new LabAssistant();

                    Pattern patternString = Pattern.compile("[a-zA-Z ]+");
                    Matcher fname = patternString.matcher(firstName);
                    Matcher lname = patternString.matcher(lastName);
                    Matcher cityName = patternString.matcher(city);
                    Matcher countryName = patternString.matcher(country);

                    if (fname.matches() && lname.matches() && cityName.matches() && countryName.matches()) {

                        la.setFirstName(firstName);
                        la.setLastName(lastName);
                        la.setCity(city);
                        la.setCountry(country);
                    } else {
                        JOptionPane.showMessageDialog(null, "only alphabets are allowed for name, city, country.");
                        return;
                    }
                    la.setDateOfBirth(dateOfBirth);
                    if (maleJRadioButton.isSelected()) {
                        la.setGender("Male");
                    } else {
                        la.setGender("Female");
                    }
                    if (singleJRadioButton.isSelected()) {
                        la.setMaritalStatus("Single");
                    } else {
                        la.setMaritalStatus("Married");
                    }
                    la.setSsn(ssn);
                    la.setHomeAddress(homeAddress);

                    la.setZipCode(Integer.parseInt(zipCode));

                    //regex
                    Pattern pattern = Pattern.compile("\\d{10}");
                    Matcher homePho = pattern.matcher(homePhoneJTextField.getText());
                    Matcher mobilePho = pattern.matcher(mobilePhoneJTextField.getText());
                    if ((homePho.matches()) && (mobilePho.matches())) {
                        la.setHomePhone(Long.parseLong(homePhone));
                        la.setMobilePhone(Long.parseLong(mobilePhone));
                    } else {
                        JOptionPane.showMessageDialog(null, "Phone number not valid. Only 10 numbers are allowed");
                        return;
                    }

                    la.setHomePhone(Long.parseLong(homePhone));
                    la.setMobilePhone(Long.parseLong(mobilePhone));
                    la.setLicenseNo(licenseNo);

                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof LabOrganization) {

                            organization = org;
                        }
                    }
                    boolean flag = check(ssn,organization);
                    if(!flag){
                        return;
                    }
                    organization.getPersonDirectory().addPerson(la);
                    UserAccount userAccount = organization.getUserAccountDirectory().createUserAccount(username, password, la, new LabRole());
                }
                if ("Employees".equals(staffType)) {
                    Person p = new Person();
                    Pattern patternString = Pattern.compile("[a-zA-Z ]+");
                    Matcher fname = patternString.matcher(firstName);
                    Matcher lname = patternString.matcher(lastName);
                    Matcher cityName = patternString.matcher(city);
                    Matcher countryName = patternString.matcher(country);
                    if (fname.matches() && lname.matches() && cityName.matches() && countryName.matches()) {
                        p.setFirstName(firstName);
                        p.setLastName(lastName);
                        p.setCity(city);
                        p.setCountry(country);
                    } else {
                        JOptionPane.showMessageDialog(null, "only alphabets are allowed for name, city, country.");
                        return;
                    }
                    p.setDateOfBirth(dateOfBirth);
                    if (maleJRadioButton.isSelected()) {
                        p.setGender("Male");
                    } else {
                        p.setGender("Female");
                    }

                    p.setSsn(ssn);
                    p.setHomeAddress(homeAddress);

                    p.setZipCode(Integer.parseInt(zipCode));

                    //regex
                    Pattern pattern = Pattern.compile("\\d{10}");
                    Matcher homePho = pattern.matcher(homePhoneJTextField.getText());
                    Matcher mobilePho = pattern.matcher(mobilePhoneJTextField.getText());
                    if ((homePho.matches()) && (mobilePho.matches())) {
                        p.setHomePhone(Long.parseLong(homePhone));
                        p.setMobilePhone(Long.parseLong(mobilePhone));
                    } else {
                        JOptionPane.showMessageDialog(null, "Phone number not valid. Only 10 numbers are allowed");
                        return;
                    }

                    p.setHomePhone(Long.parseLong(homePhone));
                    p.setMobilePhone(Long.parseLong(mobilePhone));

                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof DrugOrganization) {

                            organization = org;
                        }
                    }
                    boolean flag = check(ssn,organization);
                    if(!flag){
                        return;
                    }
                    organization.getPersonDirectory().addPerson(p);
                    UserAccount userAccount = organization.getUserAccountDirectory().createUserAccount(username, password, p, new PCEmployeeRole());
                }
            } else {
                JOptionPane.showMessageDialog(null, "This username name already exists.");
            }
            firstNameJTextField.setText("");
            lastNameJTextField.setText("");
            homeAddressJTextArea.setText("");
            cityJTextField.setText("");
            countryJTextField.setText("");
            zipCodeJTextField.setText("");
            homePhoneJTextField.setText("");
            mobilePhoneJTextField.setText("");
            licenseNoJTextField.setText("");
            trainingSchoolJTextField.setText("");
            ssnJTextField.setText("");
            userNameJTextField.setText("");
            passwordJTextField.setText("");
            ((JTextField) dobJDateChooser.getDateEditor().getUiComponent()).setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please use numbers for Postal/Zip Code, Home Phone, Mobile Phone");
        }
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void organizationTypeJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationTypeJComboBoxActionPerformed

        String staffType = String.valueOf(organizationTypeJComboBox.getSelectedItem());
        if ("Lab Assistant".matches(staffType)) {
            degreeTypeJComboBox.setVisible(false);
            degreeTypeJLabel.setVisible(false);
            trainingSchoolJTextField.setVisible(false);
            trainingJLabel.setVisible(false);
            licenseNoJLabel.setVisible(true);
            licenseNoJTextField.setVisible(true);
            maritalStatusJLabel.setVisible(true);
            singleJRadioButton.setVisible(true);
            marriedJRadioButton.setVisible(true);
        }
        if ("Nurse".matches(staffType)) {
            degreeTypeJComboBox.setVisible(true);
            degreeTypeJLabel.setVisible(true);
            trainingSchoolJTextField.setVisible(true);
            trainingJLabel.setVisible(true);
            licenseNoJLabel.setVisible(true);
            licenseNoJTextField.setVisible(true);
            maritalStatusJLabel.setVisible(true);
            singleJRadioButton.setVisible(true);
            marriedJRadioButton.setVisible(true);
        }
        if ("Employees".matches(staffType)) {
            degreeTypeJComboBox.setVisible(false);
            degreeTypeJLabel.setVisible(false);
            trainingSchoolJTextField.setVisible(false);
            trainingJLabel.setVisible(false);
            licenseNoJLabel.setVisible(false);
            licenseNoJTextField.setVisible(false);
            maritalStatusJLabel.setVisible(false);
            singleJRadioButton.setVisible(false);
            marriedJRadioButton.setVisible(false);
        }
    }//GEN-LAST:event_organizationTypeJComboBoxActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel cityJLabel;
    private javax.swing.JTextField cityJTextField;
    private javax.swing.JLabel countryJLabel;
    private javax.swing.JTextField countryJTextField;
    private javax.swing.JLabel dateOfBirthJLabel;
    private javax.swing.JComboBox degreeTypeJComboBox;
    private javax.swing.JLabel degreeTypeJLabel;
    private com.toedter.calendar.JDateChooser dobJDateChooser;
    private javax.swing.JRadioButton femaleJRadioButton;
    private javax.swing.JLabel firstNameJLabel;
    private javax.swing.JTextField firstNameJTextField;
    private javax.swing.ButtonGroup genderJButtonGroup;
    private javax.swing.JLabel genderJLabel;
    private javax.swing.JLabel headingJLabel;
    private javax.swing.JLabel homeAddressJLabel;
    private javax.swing.JTextArea homeAddressJTextArea;
    private javax.swing.JLabel homePhoneJLabel;
    private javax.swing.JTextField homePhoneJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lastNameJLabel;
    private javax.swing.JTextField lastNameJTextField;
    private javax.swing.JLabel licenseNoJLabel;
    private javax.swing.JTextField licenseNoJTextField;
    private javax.swing.JRadioButton maleJRadioButton;
    private javax.swing.ButtonGroup maritalStatusJButtonGroup;
    private javax.swing.JLabel maritalStatusJLabel;
    private javax.swing.JRadioButton marriedJRadioButton;
    private javax.swing.JLabel mobilePhoneJLabel;
    private javax.swing.JTextField mobilePhoneJTextField;
    private javax.swing.JComboBox organizationTypeJComboBox;
    private javax.swing.JLabel passwordJLabel;
    private javax.swing.JTextField passwordJTextField;
    private javax.swing.JRadioButton singleJRadioButton;
    private javax.swing.JLabel ssnJLabel;
    private javax.swing.JTextField ssnJTextField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JLabel trainingJLabel;
    private javax.swing.JTextField trainingSchoolJTextField;
    private javax.swing.JTextField userNameJTextField;
    private javax.swing.JLabel usernameJLabel;
    private javax.swing.JLabel zipCodeJLabel;
    private javax.swing.JTextField zipCodeJTextField;
    // End of variables declaration//GEN-END:variables
}
