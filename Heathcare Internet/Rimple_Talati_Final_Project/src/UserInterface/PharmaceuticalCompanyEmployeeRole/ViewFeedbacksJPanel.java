/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PharmaceuticalCompanyEmployeeRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.PharmaceuticalCompaniesEnterprise;
import Business.Person.Doctor;
import Business.Person.Patient;
import Business.WorkQueue.FeedbackToPCWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rimple
 */
public class ViewFeedbacksJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewFeedbacksJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;

    public ViewFeedbacksJPanel(JPanel userProcessContainer, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        populateFeedbackFromDoctors();
        populateFeedbackFromPatients();
        feedbackJPanel.setVisible(false);

    }

    private void populateFeedbackFromPatients() {
        DefaultTableModel model = (DefaultTableModel) patientsFeedbackJTable.getModel();
        model.setRowCount(0);
        if (enterprise instanceof PharmaceuticalCompaniesEnterprise) {
            PharmaceuticalCompaniesEnterprise pce = (PharmaceuticalCompaniesEnterprise) enterprise;
            {
                for (WorkRequest wr : pce.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof FeedbackToPCWorkRequest) {
                        FeedbackToPCWorkRequest pwr = (FeedbackToPCWorkRequest) wr;
                        if (pwr.getSender() instanceof Patient) {
                            Object[] row = new Object[5];
                            row[0] = pwr;
                            row[1] = pwr.getDrug().getDrugID();
                            row[2] = pwr.getDrug().getDrugName();
                            row[3] = pwr.getDrug().getDrugName();
                            row[4] = pwr.getSender().getFirstName() + " " + pwr.getSender().getLastName();
                            model.addRow(row);
                        }
                    }
                }
            }

        }
    }

    private void populateFeedbackFromDoctors() {
        DefaultTableModel model = (DefaultTableModel) doctorFeedbackJTable.getModel();
        model.setRowCount(0);
        if (enterprise instanceof PharmaceuticalCompaniesEnterprise) {
            PharmaceuticalCompaniesEnterprise pce = (PharmaceuticalCompaniesEnterprise) enterprise;
            {
                for (WorkRequest wr : pce.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof FeedbackToPCWorkRequest) {
                        FeedbackToPCWorkRequest pwr = (FeedbackToPCWorkRequest) wr;
                        if (pwr.getSender() instanceof Doctor) {
                            Object[] row = new Object[5];
                            row[0] = pwr;
                            row[1] = pwr.getDrug().getDrugID();
                            row[2] = pwr.getDrug().getDrugName();
                            row[3] = pwr.getDrug().getDrugName();
                            row[4] = pwr.getSender().getFirstName() + " " + pwr.getSender().getLastName();
                            model.addRow(row);
                        }
                    }
                }
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headingJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientsFeedbackJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        doctorFeedbackJTable = new javax.swing.JTable();
        viewFeedbackJButton = new javax.swing.JButton();
        feedbackJPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        feedbackJTextArea = new javax.swing.JTextArea();
        doneJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        headingJLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        headingJLabel.setText("View Feedbacks");

        patientsFeedbackJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Feedback", "Drug ID", "Drug Name", "Patient Name"
            }
        ));
        jScrollPane1.setViewportView(patientsFeedbackJTable);

        jLabel1.setText("From Patients:");

        jLabel2.setText("From Doctors:");

        doctorFeedbackJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Feedback", "Drug ID", "Drug Name", "Doctor Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(doctorFeedbackJTable);

        viewFeedbackJButton.setText("View Feedback");
        viewFeedbackJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewFeedbackJButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Feedback");

        feedbackJTextArea.setEditable(false);
        feedbackJTextArea.setColumns(20);
        feedbackJTextArea.setRows(5);
        jScrollPane4.setViewportView(feedbackJTextArea);

        doneJButton.setText("Done");
        doneJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout feedbackJPanelLayout = new javax.swing.GroupLayout(feedbackJPanel);
        feedbackJPanel.setLayout(feedbackJPanelLayout);
        feedbackJPanelLayout.setHorizontalGroup(
            feedbackJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(feedbackJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(feedbackJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, feedbackJPanelLayout.createSequentialGroup()
                        .addComponent(doneJButton)
                        .addGap(103, 103, 103))))
        );
        feedbackJPanelLayout.setVerticalGroup(
            feedbackJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(feedbackJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(feedbackJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(147, 147, 147))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, feedbackJPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(doneJButton)
                .addGap(28, 28, 28))
        );

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(94, 94, 94)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(backJButton)
                            .addGap(157, 157, 157)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(headingJLabel)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(17, 17, 17)
                                    .addComponent(viewFeedbackJButton))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(160, 160, 160)
                            .addComponent(feedbackJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(147, 147, 147))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingJLabel)
                .addGap(68, 68, 68)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewFeedbackJButton)
                    .addComponent(backJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbackJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void doneJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneJButtonActionPerformed

        feedbackJPanel.setVisible(false);
        populateFeedbackFromDoctors();
        populateFeedbackFromPatients();

    }//GEN-LAST:event_doneJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewFeedbackJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewFeedbackJButtonActionPerformed

        int patientSelected = patientsFeedbackJTable.getSelectedRow();
        int doctorSelected = doctorFeedbackJTable.getSelectedRow();

        if ((patientSelected > 0) || (doctorSelected > 0)) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        if ((patientSelected == 0) && (doctorSelected == 0)) {
            JOptionPane.showMessageDialog(null, "Please select only one row");
            return;
        }
        feedbackJPanel.setVisible(true);
        if (patientSelected >= 0) {
            FeedbackToPCWorkRequest pwrForPatient = (FeedbackToPCWorkRequest) patientsFeedbackJTable.getValueAt(patientSelected, 0);
            feedbackJTextArea.setText(pwrForPatient.getMessage());
        }
        if (doctorSelected >= 0) {
            FeedbackToPCWorkRequest pwrForDoctor = (FeedbackToPCWorkRequest) doctorFeedbackJTable.getValueAt(doctorSelected, 0);
            feedbackJTextArea.setText(pwrForDoctor.getMessage());
        }
    }//GEN-LAST:event_viewFeedbackJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable doctorFeedbackJTable;
    private javax.swing.JButton doneJButton;
    private javax.swing.JPanel feedbackJPanel;
    private javax.swing.JTextArea feedbackJTextArea;
    private javax.swing.JLabel headingJLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable patientsFeedbackJTable;
    private javax.swing.JButton viewFeedbackJButton;
    // End of variables declaration//GEN-END:variables
}
